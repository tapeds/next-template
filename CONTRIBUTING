# Introduction

### Welcome!

Thank you for considering contributing to our project! Your contributions are invaluable to us, and we're excited to work with you.

### Why Read Our Guidelines?

Following these guidelines ensures smooth collaboration and helps us maintain the project effectively. By respecting these guidelines, you demonstrate your commitment to the project, and we, in turn, will strive to address your contributions promptly and respectfully.

### What Contributions We're Looking For

We welcome various forms of contributions, including but not limited to:

- Improving documentation
- Triaging bugs
- Writing tutorials
- Submitting bug reports and feature requests
- Writing code

### Contributions We're NOT Looking For

Please refrain from using the issue tracker for support questions. Instead, seek assistance from appropriate channels such as our designated support forums or relevant community spaces.

# Ground Rules

### Expectations for Behavior

We value a respectful and inclusive environment. Please adhere to the following responsibilities:

- Ensure cross-platform compatibility.
- Meet all requirements outlined in our contribution checklist.
- Discuss major changes transparently and seek community feedback.
- Minimize the addition of new classes; prioritize the use of functions.
- Keep feature versions concise, ideally one new feature per version.
- Foster a welcoming atmosphere for newcomers from diverse backgrounds.

For further details, refer to our [Code of Conduct](https://www.python.org/psf/codeofconduct/).

# Your First Contribution

### Where to Begin

If you're new to our project, here's a helpful starting point:

Check our list of beginner and help-wanted issues on GitHub. These issues are sorted by the number of comments, giving you an idea of their impact and complexity.

### Newcomer-Friendly Resource

If you're working on your first pull request, we recommend the free series, [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github).

# Getting Started

### Submitting Your Contribution

For significant contributions:

1. Fork the repository.
2. Implement your changes.
3. Ensure adherence to our code style.
4. Sign the Contributor License Agreement (CLA).
5. Submit a pull request, indicating your CLA agreement.

For minor fixes, follow our obvious fix policy. These fixes can be submitted without a CLA.

# How to Report a Bug

### Security Disclosures

For security vulnerabilities, do NOT open an issue. Instead, email [security@ourproject.com].

### Bug Reporting Guidelines

When filing a bug report, provide the following information:

1. Version of the software you're using.
2. Operating system and processor architecture.
3. Steps to reproduce the issue.
4. Expected outcome.
5. Actual outcome.

General questions should be directed to our designated support channels.

# How to Suggest a Feature or Enhancement

### Our Development Philosophy

[Project Name] aims to provide [describe your project's goals]. We prioritize simplicity and flexibility, allowing users to tailor solutions to their needs.

### Suggesting a Feature

If you have a feature request:

- Open an issue on GitHub.
- Clearly explain the feature, its necessity, and proposed functionality.

# Code Review Process

### Acceptance Criteria

Pull requests are reviewed by the core team in regular meetings. Feedback is provided within two weeks, and contributors are expected to respond promptly.

### Community Engagement

Join our Gitter channel for discussions and connect with the core team during office hours for immediate feedback.

# Community

### Engage Beyond GitHub

Join our Gitter channel for real-time discussions and collaboration. We value community engagement and welcome your input.

# Bonus: Commit Message

### Commit Message Convention

This website follows [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)

Commit message will be checked using [husky and commit lint](https://theodorusclarence.com/library/husky-commitlint-prettier), you can't commit if not using the proper convention below.

#### Format

`<type>(optional scope): <description>`
Example: `feat(pre-event): add speakers section`

#### 1. Type

Available types are:

- feat → Changes about addition or removal of a feature. Ex: `feat: add table on landing page`, `feat: remove table from landing page`
- fix → Bug fixing, followed by the bug. Ex: `fix: illustration overflows in mobile view`
- docs → Update documentation (README.md)
- style → Updating style, and not changing any logic in the code (reorder imports, fix whitespace, remove comments)
- chore → Installing new dependencies, or bumping deps
- refactor → Changes in code, same output, but different approach
- ci → Update github workflows, husky
- test → Update testing suite, cypress files
- revert → when reverting commits
- perf → Fixing something regarding performance (deriving state, using memo, callback)
- vercel → Blank commit to trigger vercel deployment. Ex: `vercel: trigger deployment`

#### 2. Optional Scope

Labels per page Ex: `feat(pre-event): add date label`

\*If there is no scope needed, you don't need to write it

#### 3. Description

Description must fully explain what is being done.

Add BREAKING CHANGE in the description if there is a significant change.

**If there are multiple changes, then commit one by one**

- After colon, there are a single space Ex: `feat: add something`
- When using `fix` type, state the issue Ex: `fix: file size limiter not working`
- Use imperative, and present tense: "change" not "changed" or "changes"
- Don't use capitals in front of the sentence
- Don't add full stop (.) at the end of the sentence

Thank you for your interest in contributing to our project! We look forward to your valuable contributions.
